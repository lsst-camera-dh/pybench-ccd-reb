#! /usr/bin/env python

# --------------------------------------------------------------------------
# Echo server
# To test the communication with the CFHT TCS / MegaCam DAQ system
# --------------------------------------------------------------------------

import sys
import os, os.path
import time

# --------------------------------------------------------------------------
import logging
logging.basicConfig(level=logging.DEBUG,format='%(asctime)s: %(message)s')
# --------------------------------------------------------------------------

import xmlrpclib
from SimpleXMLRPCServer import SimpleXMLRPCServer

# --------------------------------------------------------------------------
DEFAULT_HOSTNAME = "localhost"
DEFAULT_PORT     = 8010
# --------------------------------------------------------------------------

# --------------------------------------------------------------------------
# import dice.control.motor as dcm         # mcapi.py 
# import dice.control.led as dcl           # led specs # ici, ca ne sert pas. 
# import dice.control.led.specs as dcls    # Q: what is the difference with dcl ? 
# import dice.control.utils as dcu         # Q: just bytes.py ?

class Status(object):
    ALT_IDLE = 0
    ALT_READY = 1
    ALT_MOVING = 2
    
    AZ_IDLE = 0
    AZ_READY = 1
    AZ_MOVING = 2
    
    BACKEND_IDLE = 0
    BACKEND_READY = 1
    BACKEND_LED_ON = 2
    BACKEND_LED_OFF = 3
    
# ------------- LEDHEAD General Control ------------------------------------
def status():
    """
    Return the status of the system.
    """
    return { "backend"   : Status.BACKEND_READY, 
             "alt_motor" : Status.ALT_READY,
             "az_motor"  : Status.AZ_READY }

def init():
    """
    Init the DICE2 subsystems:
      - init the motors 
      - init the backend
      """
    logging.info("init called.")
    motor_init()
    logging.info("init done.")
    return True

# ----------------------- LEDHEAD Motion -----------------------
def home():
    """
    Home the motors, i.e. move up, down, left, right to test the
    mechanical motor stops and reset the motor zeros.  Should be
    called just once at the begining of a run.

    WARNING: blocking call. Takes about 20s.
    
    see: ledhead.LEDHead.home()/ledhead.LEDHead.motor_home()
         mcapi.Axis.home()/mcapi.Axis.find_limits()
    """
    logging.info("home() called.")
    logging.info("home() Homing the motors (takes 20s)")
    time.sleep(20)
    logging.info("home() done.")
    return True

def move_absolute(alt, az, wait=False):
    """
    Move the LED head to the specified absolute position ('alt', 'az'), 
    expressed in coder steps.
    
     - if wait==True, the call is blocking,
     - otherwise, the call returns immediately, and one has to poll
       the motor status (with the status() call) to check whether the
       head is still moving or not.

    see: ledhead.LEDHead.move_absolute()
         mcapi.Axis.move_absolute()
    """
    logging.info("move_absolute(%d, %d) called." % (alt, az))
    logging.info("move_absolute() moving to absolute position (%d,%d)" % (alt, az))
    if wait: 
        time.sleep(2)
    logging.info("move_absolute(%d, %d) done." % (alt, az))
    return True

def move_relative(dalt, daz, wait=False):
    """
    move the LED head by 'dalt' steps in altitude and 'daz' coder
    steps in azimuth. 
    
     - if wait==True, the call is blocking,
     - otherwise, the call returns immediately, and one has to poll
       the motor status (with the (status() call) to check whether the
       head is still moving or not.

    see: ledhead.LEDHead.move_relative()
         mcapi.Axis.move_absolute()
    """
    logging.info("move_relative(%d, %d) called." % (dalt, daz))
    logging.info("move_relative() moving of relative offset (%d,%d)" % (dalt, daz))
    if wait:
        time.sleep(2)
    logging.info("move_relative(%d, %d) done." % (dalt, daz))
    return True

def at_target():
    """
    return True if both motors have reached their assigned position. 
    return False otherwise. 
    
    see: mcapi.Axis.at_target
    """
    logging.info("at_target called.")
    logging.info("at_target done.")
    return True

def position():
    """
    Return the position of both axes. 
    see: LEDHead.motor_position
    """
    logging.info("position() called.")
    logging.info("position() done.")
    return -12420, 34345

def park(wait=False):
    """
    Move the head to a predefined parking position.

     - if wait==True, the call is blocking,
     - otherwise, the call returns immediately, and one has to poll
       the motor status (with the (status() call) to check whether the
       head is still moving or not.
    """
    logging.info("park() called.")
    time.sleep(25.)
    logging.info("park() done.")
    return True

def motor_status():
    """
    Return the status of both motors. 
    
    ajouter is_on();
    see: mcapi.LEDHead.
    """
    logging.info("motor_status() called.")
    time.sleep(1.)
    logging.info("motor_status() done.")
    return (Status.ALT_READY, Status.AZ_READY)

def motor_init():
    logging.info("motor_init() called.")
    time.sleep(2)
    logging.info("motor_init() done.")
    return True

# ----------------------- LED Control --------------------------
def led_on(led, current = None):
    logging.info("led_on() called.")
    logging.info("led_on() Turn ON LED %d." % led)
    time.sleep(1)
    logging.info("led_on() done.")
    return True

def led_off():
    logging.info("led_off() called.")
    logging.info("led_off() Turn OFF LED.")
    logging.info("led_off() done.")
    return True

def planet_on():
    logging.info("planet_on() called.")
    logging.info("planet_on() Turn ON PLANET.")
    logging.info("planet_on() done.")
    return True

def planet_off():
    logging.info("planet_off() called.")
    logging.info("planet_off() Turn OFF PLANET.")
    logging.info("planet_off() done.")
    return True

def sample_and_dump(led):
    logging.info("sample_and_dump() called.")
    time.sleep(15)
    control_values = {
        "ILED": { 
            'T': 30141480148.89,   # timestamp (unix time)
            'C': led,              # channel (led channel)
            'N': 29552,            # number of samples
            'M': 4.23,             # mean 
            'V': 0.3535 },         # variance
        "IPHD" : {
            'T': 30141480148.89,  
            'C': led, 
            'N': 29552, 
            'M': 4.23, 
            'V': 0.3535 },
        "T24" : {
            'T': 30141480148.89,  
            'C': led, 
            'N': 29552, 
            'M': 4.23, 
            'V': 0.3535 },
        "TBE" : {
            'T': 30141480148.89,  
            'C': led, 
            'N': 29552, 
            'M': 4.23, 
            'V': 0.3535 },
        "VREF" : {
            'T': 30141480148.89,  
            'C': led, 
            'N': 29552, 
            'M': 4.23, 
            'V': 0.3535 },
        }

    result = []
    for p in ["ILED", "IPHD", "T24", "TBE", "VREF"]:
        for s in ['T','C','N','M','V']:
            result.append([p+s, control_values[p][s]])            
    logging.info("sample_and_dump(%d) returns:" + str(result))
    logging.info("sample_and_dump(%d) done." % led)                           
    return result

def backend_reset():
    """Reset the LED backend"""
    logging.info("backend reset called.")
    time.sleep(5)
    logging.info("backend reset done.")
    return True

def fail():
    a = 1. / 0.
    return True
    
# ------------- Missing functions and tests --------------------------------
def server_quit():
    sys.exit(0)

# ------------- LEDHEAD Server ---------------------------------------------
HOSTNAME = DEFAULT_HOSTNAME
PORT = DEFAULT_PORT
if len(sys.argv) > 1:
    try:
        HOSTNAME = sys.argv[1]
    except:
        pass
    try:
        PORT = int(sys.argv[2])
    except:
        pass

server = SimpleXMLRPCServer((HOSTNAME, PORT))
# server = SimpleXMLRPCServer(("dicehead", 8001))
print "dice2@%s: Listening on port %d. Waiting for commands." % (HOSTNAME, PORT)

# General Control Functions 
server.register_function(status,              "status")
server.register_function(init,                "init")

# LEDHEAD motions 
server.register_function(home,                "home")
server.register_function(move_absolute,       "move_absolute")
server.register_function(move_relative,       "move_relative")
server.register_function(at_target,           "at_target")
server.register_function(position,            "position")
server.register_function(park,                "park")
server.register_function(motor_status,        "motor_status")
server.register_function(motor_init,          "motor_init")

# LEDHEAD motions 
server.register_function(led_on,              "led_on")
server.register_function(led_off,             "led_off")
server.register_function(planet_on,           "planet_on")
server.register_function(planet_off,          "planet_off")
server.register_function(sample_and_dump,     "sample_and_dump")
server.register_function(fail,                "fail")

# misc 
server.register_function(server_quit,         "quit")

# introspection

def listmethods():
    return ['led_on','led_off']

server.register_function(listmethods,         "__dir__")
server.register_function(listmethods,         "system.listMethods")

# Launch the server
server.serve_forever()

# --------------------------------------------------------------------------

