#! /usr/bin/env python
#
# ==================================================================
#
# LSST
#
# Remote control (XPL-RPC) of the CLAP for the LSST testbench
# XML-RPC server to control it remotely
# default device: USB on lpnlsstclap
# default port: 8950
#
# Authors: Laurent Le Guillou 
# (recycled from DICE control system code)
#
# ==================================================================

import sys
import os, os.path
import time
import subprocess
import sys, os 
import signal
import shutil
import socket # to get the hostname
import datetime

# ==================================================================

import logging
# logging.basicConfig(level=logging.DEBUG,format='%(asctime)s: %(message)s')

# ==================================================================

import inspect
import xmlrpclib
xmlrpclib.Marshaller.dispatch[type(0L)] = lambda _, v, w: w("<value><i8>%d</i8></value>" % v)
from SimpleXMLRPCServer import SimpleXMLRPCServer, list_public_methods

# ==================================================================

from exceptions import Exception

# class MotorError(Exception): pass

# ==================================================================

# DEFAULT_HOSTNAME = "lpnlsstclap"
DEFAULT_HOSTNAME = "134.158.154.80" ### To change
DEFAULT_PORT     = 8950
# DEFAULT_DEVICE   = "/dev/ttyS1"

SERVER_HOSTNAME = os.getenv("CLAP_SERVER_HOSTNAME", DEFAULT_HOSTNAME)
SERVER_PORT     = int(os.getenv("CLAP_SERVER_PORT", DEFAULT_PORT))
# SERVER_DEVICE   = os.getenv("CLAP_SERVER_DEVICE", DEFAULT_DEVICE)

# ==================================================================

class CLAPServer(SimpleXMLRPCServer):
    def serve_forever(self):
	self.quit = 0
	while not self.quit:
	    self.handle_request()

    # def __getattr__(self, name):
    #     if name == '__doc__':
    #         return 'sub special'
    #     else:  
    #         raise AttributeError, name

# ==================================================================



import struct
from array import array
import dice.control.backend as dcb
from threading import Thread

# ==================================================================

class CLAPSampler(Thread):

    def __init__(self,                
                 channels = [1],
                 period = 1600, # in 20ns ticks
                 wordcount = 32000,  
                 blocksize = 32768,
                 label = None):

        Thread.__init__(self)
        self.channels = channels
        self.period = period
        self.wordcount = wordcount
        self.blocksize = blocksize
        self.label = label
        self.ready = True

        self.result = {}

    def remaining(self):
        """
        Return the remaining word number to be read from the FIFO.
        """
        return dcb.read_at(0x17, 0x19)


    def run(self):

        self.ready = False

        # ------ ADC + FIFO setup
        # Choose the mode and number of words to be read
        dcb.write(0x06, bytearray([0]))

        dcb.write_at(0x04, 0x05, self.period)    # choose ADC frequency
        dcb.write_at(0x14, 0x16, self.wordcount) # choose wordcount

        adc_multiplexer_mask = 0x00
        for channel in self.channels:
            adc_multiplexer_mask |= 2**(channel - 1) 

        print "COUCOU"
        logging.info("ADC mask = %02x" % adc_multiplexer_mask)
        dcb.write(0x1c, bytearray([adc_multiplexer_mask]))

        # ------ Sampling (and FIFO writing)

        # Start writing into the FIFO (from the ADC)
        dcb.write(0x03, bytearray([0x02]))

        logging.info("Starting sampling... (and FIFO writing)")
        t_start = time.time()
        while (dcb.read(0x0A)[0] & 0x01):
            logging.info('.')
            # sys.stderr.flush()
            time.sleep(1)
        t_stop = time.time()
        logging.info("End of sampling and FIFO writing.")
        logging.info("Writing FIFO took %f s" % (t_stop - t_start))
        logging.info("Now we have to read %d 2-byte words from the FIFO." 
                     % self.remaining())

        # Get Board timestamp
        board_timestamp = dcb.read_at(0x1E, 0x22)

        # ------ Reading the FIFO

        data = bytearray()
        t_start_read = time.time()
        logging.info("Starting FIFO readout...")

        while (dcb.read(0x0A)[0] & 0x04):
            # How many remain to be read ?
            amount = self.remaining()
            logging.info("remains: %d" % amount)
            if amount <= 0:
                break
    
            if amount >= self.blocksize:
                size = 2 * self.blocksize
            else:
                size = 2 * amount

            data.extend(dcb.read(0x08, size))
            amount = self.remaining()
            logging.info("remains after reading: %d" % amount)

        t_stop_read = time.time()

        logging.info("End of FIFO readout.")
        logging.info("%d bytes received in %f s." % 
                 (len(data), t_stop_read - t_start_read))

        # ------ Building the resulting dictionary
        # 

        self.result = { 'channels': self.channels,
                        'period': self.period,
                        'blocksize': self.blocksize,
                        'timestamp': t_start,
                        'board_timestamp': board_timestamp,
                        'binarydata': xmlrpclib.Binary(data) }

        self.ready = True


# ==================================================================

class CLAPRemote(object):
    
    instance = None

    # --------------------------------------------------------------

    def __new__(cls, *args, **kargs):
        if cls.instance is None: 
            cls.instance = object.__new__(cls, *args, **kargs)
        return cls.instance
    
    def __init__(self, debug = False):
        self.debug = debug
        self.sampler = None

    # --------------------------------------------------------------

    def status(self):
        """
        Return the status of the system.
        True = Ready / False = sampling (not ready)
        """
        if self.sampler == None:
            return True

        return self.sampler.ready 

    # --------------------------------------------------------------

    def open(self):
        """
        Open the CLAP connection and set up the CLAP.
        """
        logging.info("CLAP.open() called.")

        # Open the USB port
        dcb.open(debug = self.debug)

        # Reset HARD
        dcb.write(0x1b, bytearray([1]))

        logging.info("CLAP.open() done.")
        return True

    def close(self):
        """
        Close the connection with the CLAP.
        """ 
        logging.info("CLAP.close() called.")
        dcb.close()
        logging.info("CLAP.close() done.")
        return True

    def reset(self):
        """
        Reset the CLAP (hard reset).
        (with the exception of all remote interface settings).
        """
        logging.info("CLAP.reset() called.")

        # Reset HARD
        dcb.write(0x1b, bytearray([1]))

        logging.info("CLAP.reset() done.")
        return True

    def clear(self):
        """
        Clear the instrument status.
        """ 
        logging.info("CLAP.clear() called.")

        # Reset HARD
        dcb.write(0x1b, bytearray([1]))

        logging.info("CLAP.clear() done.")
        return True
    
    # ----------------------- CLAP commands -----------------------------

    def read(self, addr):
        return list(dcb.read(addr))

    def read_at(self, addr_start, addr_stop):
        return int(dcb.read_at(addr_start, addr_stop))

    def write(self, addr, word):
        return dcb.write(addr, word)

    def write_at(self, addr_start, addr_stop, value):
        return dcb.write_at(addr_start, addr_stop, value)

    def sample(self, 
               channels = [1],
               period = 1600, # in 20ns ticks
               wordcount = 32000,  
               blocksize = 32768,
               label = None):
        """
        Request a sampling of the CLAP.
        Asynchronous call. Return nothing.
        """

        # ------ First checking arguments

        if wordcount > 8387583:
            logging.error(
                "wordcount too large. Should be <= 8387583 (FIFO size).")
            return False
            
        # sampling frequency should be in [1 kHz: 500 kHz]
        #   1 kHz -> period =   100 ticks of 20 ns
        # 500 kHz -> period = 50000 ticks of 20 ns
        # 
        if not( (100 <= period) and (period <= 50000) ):
            logging.error("period should be in range [100:50000].")
            return False


        # Create the Thread

        self.sampler = CLAPSampler(channels,
                                   period,
                                   wordcount,
                                   blocksize,
                                   label)

        self.sampler.start()

        logging.info("CLAP.sample() started.")

        return True


    def get_sampling_data(self):
        """
        Request a sampling of the CLAP.
        Return the result as a dictionary.
        """

        if self.sampler == None:
            logging.error("No sampling yet done.")
            return {}

        if not(self.sampler.ready):
            logging.error("Sampling not achieved.")
            return {}

        return self.sampler.result
            

    # ----------------------- Introspection -----------------------------

    def _listMethods(self):
        logging.info("CLAP._listMethods() called.")
        methods = list_public_methods(self)
        logging.info("CLAP._listMethods() done.")
        return methods

    def _methodHelp(self, method):
        f = getattr(self, method)
        return inspect.getdoc(f)

# ==================================================================

# ------------- Missing functions and tests ------------------------

def server_quit():
    logging.info("Server going down.")
    server.quit = 1
    return 1

# ==================================================================

# ------------- Daemonization ---------------------------------------
# Default working directory for the daemon.
WORKDIR = "/"

def redirect_stream(system_stream, target_stream):
    """ 
    Redirect a system stream to a specified file.
    
    'system_stream' is a standard system stream such as
    ''sys.stdout''. 'target_stream' is an open file object that
    should replace the corresponding system stream object.

    If 'target_stream' is ''None'', defaults to opening the
    operating system's null device and using its file descriptor.
    
    """

    if target_stream is None:
        target_fd = os.open(os.devnull, os.O_RDWR)
    else:
        target_fd = target_stream.fileno()
    os.dup2(target_fd, system_stream.fileno())


def daemonize(options, args):
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit first parent
            sys.exit(0) 
    except OSError, e: 
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1)

    # Become leader of a new session to decouple from the controlling tty
    os.setsid() 
    # We stay with the same umask
    # os.umask(0) 

    # do second fork and kill session leader to ensure one will never get attach to a TTY.
    try: 
        pid = os.fork() 
        if pid > 0:
            # exit from second parent, print eventual PID before
            print "Starting server as daemon with PID %d ..." % pid 
            sys.exit(0) 
    except OSError, e: 
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror) 
        sys.exit(1) 
    

    # start the daemon main
    main(options, args) 


def main(options, args):

    logging.basicConfig(filename=options.log_file, 
                        level=logging.DEBUG, format='%(asctime)s: %(message)s')

    # Now that logging is set up decouple from parent environnement
    redirect_stream(sys.stdin,  None)
    redirect_stream(sys.stdout, None)
    redirect_stream(sys.stderr, None)    

    # General Control Functions 
    server.register_function(clap.status,       "status")
    server.register_function(clap.open,         "open")
    server.register_function(clap.close,        "close")
    server.register_function(clap.reset,        "reset")
    server.register_function(clap.clear,        "clear")

    # Clap commands
    server.register_function(clap.read,         "read")
    server.register_function(clap.read_at,      "read_at")
    server.register_function(clap.write,        "write")
    server.register_function(clap.write_at,     "write_at")
    server.register_function(clap.sample,       "sample")
    server.register_function(clap.get_data,     "get_data")
    server.register_function(server_quit,       "quit")

    # for remote introspection (tab completion with ipython)
    server.register_function(clap._listMethods, "__dir__")
    server.register_function(clap._listMethods, "system.listMethods")
    server.register_function(clap._listMethods, "trait_names")
    server.register_function(clap._listMethods, "_getAttributeNames")
    # TODO: implement: system.methodSignature
    server.register_function(clap._methodHelp,  "system.methodHelp")

    logging.info("Server going up.")
    server.serve_forever()

# ------------------------------------------------------------------

# ==================================================================

if __name__ == '__main__':

    # ------------- log file ----------------------

    now = datetime.datetime.utcnow()
    logname = ( "clap-server-%d-%s.log" % 
                ( SERVER_PORT,
                  now.isoformat().split('T')[0] ) )
    # logname = ( "clap-server-%s.log" % today.isoformat() )
                
    # ------------- parsing command line ----------

    import optparse
    parser = optparse.OptionParser(usage="""
%prog [-d] 

Start the Clap Electrometer remote control server. 
""")
    parser.add_option('-d', '--daemon', default=False, action='store_true',
                      help='Run as a background daemon')
    parser.add_option('-H', '--hostname', default=SERVER_HOSTNAME, action='store',
                      help='Listen adress')
    parser.add_option('-p', '--port', default=SERVER_PORT, action='store', type='int',
                      help='Listen on port')
    # parser.add_option('-D', '--device', default=SERVER_DEVICE, action='store',
    #                   help='Serial port device')
    parser.add_option('-l', '--log-file', default=logname, action='store',
                      help='Specify a file for daemon logs.')

    (options, args) = parser.parse_args()

    # ------------- XML-RPC Server ----------------

    SERVER_HOSTNAME = options.hostname
    SERVER_PORT = int(options.port)
    # SERVER_DEVICE = options.device
    
    # ------------- Initialize Instrument ---------

    clap = CLAPRemote()

    server = CLAPServer((SERVER_HOSTNAME, SERVER_PORT))
    server.register_introspection_functions()

    # ---------------------------------------------

    print ( "Clap: listening on port %s:%d. Waiting for commands." % 
            (SERVER_HOSTNAME, SERVER_PORT) )
    
    if options.daemon:
        daemonize(options, args)
    else:
        main(options, args)


# ----------------------------------------------------------------------------

