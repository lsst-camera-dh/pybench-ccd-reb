#! /usr/bin/env python

import sys, os, os.path
import getopt
import time

import dice.testbench.motor as dtm

# --------- Parse command line arguments ------------------

def usage():
    print >>sys.stderr, "usage: bench-source-move"
    print >>sys.stderr, "               [--xy <port>]"
    print "                             a=position[unit] | da=offset[unit]"
    print >>sys.stderr, "Move axis 'a' (X,Y) to position 'position'" 
    print >>sys.stderr, "on the (SN/Sky)Dice test bench."

try:
    opts, args = \
        getopt.getopt(sys.argv[1:], "hv", \
                          ["help", "verbose", "z="])
except getopt.GetoptError:
    # print help information and exit
    usage()
    sys.exit(1)
        
# print opts
# print args

inputs = []
verbose = False

source_xy_port = dtm.Bench.default_source_xy_port

for option, arg in opts:
    if option in ("-h", "--help"):
        help()
        sys.exit(0)
    if option in ("-v", "--verbose"):
        verbose = True
    if option in ("--xy"):
        source_xy_port = arg

if len(args) < 1:
    usage()
    sys.exit(1)

# ----- Analyse each provided argument --------------------

commands = []

for arg in args:
    if '=' not in arg:
        print >>sys.stderr, "error: invalid argument [%s]" % arg
        usage()
        sys.exit(2)
    eqparts = arg.split('=')
    if len(eqparts) != 2:
        print >>sys.stderr, "error: invalid argument format [%s]" % arg
        usage()
        sys.exit(3)
    
    axis_spec = eqparts[0].upper()
    if len(axis_spec) < 1:
        print >>sys.stderr, "error: invalid argument format (axis) [%s]" % arg
        usage()
        sys.exit(4)
    relative = False
    if axis_spec[0] == 'D': # relative
        relative = True
        if len(axis_spec) != 2:
            print >>sys.stderr, \
                "error: invalid argument format (axis) [%s]" % arg
            usage()
            sys.exit(5)
    axis = axis_spec[-1]
    if axis not in ['X', 'Y', 'H', 'V']:
        print >>sys.stderr, \
            "error: invalid argument format (unknown axis) [%s]" % arg
        usage()
        sys.exit(6)
        
    value = eqparts[1]
    if len(value) < 1:
        print >>sys.stderr, "error: invalid argument format (value) [%s]" % arg
        usage()
        sys.exit(4)

    unit = "step"
    if (len(value) > 2) and (value[-2:] == 'mm'):
        unit = "mm"
        position = float(value[:-2])
    elif (len(value) > 4) and (value[-4:] == 'mm'):
        unit = "step"
        position = float(value[:-4])
    else:
        unit = "step"
        position = float(value)
        
    commands.append(dict({'axis': axis,
                          'relative': relative,
                          'position': position,
                          'unit': unit}))

# print commands

# ----- Init testbench motors, send request, then close ---

B = dtm.Bench(sensor_xy_port = None,
              sensor_z_port  = None,
              source_xy_port = source_xy_port,
              debug = verbose)
B.open()
B.setup() # Full setup

for command in commands:
    if command['relative']:
        B.source_move_relative(command['axis'], 
                               command['position'],
                               command['unit'])
    else:
        B.source_move_absolute(command['axis'], 
                               command['position'],
                               command['unit'])

B.close()

# ---------------------------------------------------------

